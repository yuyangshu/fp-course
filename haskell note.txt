day 1, bla | list

universally conserving the property that the outputs of all functions are solely determined by their inputs

this is not functional programming:
  sum(int list) {
    var r = 0;
    for(el in list) {
      r = r + el
    }
    return r;
  }
because r = 0 is a violation of the principle above

functional programming is good for not introducing side effects

haskell has type inference so you do not need to declare the type of variables

why use single letter variable names? all that matters is types

:t to get the type of a variable
:r or :reload to reload
:info Bool to get info about booleans

line 7:
  s is polymorphic (Greek: poly -> many, morph -> form) so it starts with a lowercase letter
  Integer is a typeand thus concrete/monomorphic

line 16:
  h :: Integer -> Integer -> Integer
  takes one argument, it is equivalent to h :: Integer -> (Integer -> Integer)
  which means it takes one argument and returns a function that returns an integer for an integer
  functions always take exactly one arguemnt in haskell
  :t h 3 gives you h 3 :: Integer -> Integer
  thus you can call g (h 3) and get back 204

line 19:
  this is a lambda function (Greek: l -> lambda)
  g and gg are equivalent
  thus you can get 187 from g (\i -> i + 88)

if a function starts with a-z: prefix position by default; otherwise infix position
  h 77 88 is equivalent to 77 `h` 88
  (+) 77 88 is equivalent to 77 + 88

there's only one function can possible have the type anything -> anything and that's line 11
in other languages you can do all sorts of things
Bool -> Bool -> Bool has 16 functions (2 ^ 2) ^ 2

data types start with a capital letter
syntax to define a data type: data Name [0..type paramaters] = Ctor1 ... | Ctor2 ... | ...
line 22:
  what is the type of F? a constructor that takes no arguments and returns a Boolean
line 23:
  derive Show to allow the type to be printed, Eq to allow comparison

line 31:
  this is pattern matching
  you get a warning for nonexhaustive patterns
line 38:
  this is the more canonical syntax

foldLeft: loop
foldRight: constructor substitution

when you don't know the function from its type, you write property based tests
these are not proofs (unlike types), because tests only prove the presence, not the absence of bugs



tomorrow:

mapOptional :: (a -> b) -> Optional a -> Optional b
map         :: (a -> b) -> List a -> Optional b
(.)

dot compose function composition

list, optional, tee arrow are things that map
write a function for all things that map

class KHasMap blah where
  themap :: (a -> b) -> blah a -> blah b

instance Functor List where
  themap = map
  {- themap :: (a -> b) -> List a -> List b is the general version -}

{- instance Functor Int does not make sense since Int does not take a type
:kind List
List :: * -> *
:kind Int
Int :: *
:kind (->)
(->) :: * -> * -> *
:kind (->) Int
(->) Int :: * -> *
it now has a type to be a Functor
-}

flipAnything :: KHasMap k (a -> b) -> a -> k b
where KHasMap is a constraint

"things that have map" are called Functors

you can have a list of Ts but not a thing of Ts in other languages

=> constraint

then Applicative

Q: when to use the arrow Functor? A: when you don't want the clumsiness of dependency injection

hoogle: search for library function based on function name or type signature
djinn: generate haskell code from a type





day 2, optional | functor | applicative | monad

do you functinal programmers have null?
no, we have maybe/optional
why is this better?
a string that is not nullable but can have null reference is not different to an Optional that can be empty in itself
you will get a compiler error if you do not check Empty

bindOptional is analogous to flatMap with respect to mapOptional/map

https://qfpl.io/posts/fp-cheat-sheet/

(a -> b) -> f a -> f b is a covariant functor, "things that can map"

data WhichWay = Equal | LT | GT
data Fruit = Apple | Orange | Pear

class Ordering a where
  ordering :: a -> a -> WhichWay

instance Ordering Fruit where
  ordering Apple Apple = Equal

(->) is a function on types
:kind (->)
(->) :: * -> * -> *
which "takes two types" and returns another type

functors are * -> *
:k Functor
Functor :: (* -> *) -> Constraint

there's only one thing that's of unit value and that's ()

(<*>) is called spaceship, apply, or angle bum

Q: conceptually what's the point of pure?
A: conceptually what's the point of zero to addition?

the smallest turing complete programming language?
SKI combinator calculus
I is redundant so it's sometimes called SK combinator calculus
pure and spaceship is all you need ;)

all we're doing now is cartesian products
there's another applicative ziplist to do list zipping

an example of -> t is + 10
lift2 (+) (+10) (*99) 7

https://wiki.haskell.org/Typeclassopedia

why functional programming?
so that we don't write the same code again and again

https://www.seas.upenn.edu/~cis194/fall16/

something that's a functor but not an applicative?
data Hi a = Hi a Int
instance Functor Hi where
  f <$> (Hi a n) = Hi (f a) n

functor -> map
applicative -> add pure and apply
monad -> add bind

just like flatten, flatMap, flattenAgain
join can be written using bind and vice versa



tomorrow:

Chars is an alias of List Char

. is an instance of fmap





day 3

-- a functor that's not applicative --
data Hi a = Hi Int a

instance Functor Hi where
  -- fmap :: (a -> b) -> Hi a -> Hi b
  fmap f (Hi n a) = Hi n (f a)

-- this 
instance Applicative Hi where
  -- pure :: a -> Hi a
  pure a = Hi (-1) a
  Hi n1 f <*> Hi n2 a = Hi 27 (f a)

-- has binary associative and identity operations, not applicative
instance Applicate Hi where
  -- pure :: a -> Hi 0 a
  pure a = Hi (-1) a
  Hi n1 f <*> Hi n2 a = Hi (n1 + n2) (f a)

-- associativity: (a . b) . c = a . (b . c)

-- a applicative that does not have a monad --
data ZipList a = Nil | Cons a (ZipList a)

instance Functor ZipList where
  fmap _ Nil = Nil
  fmap f (Cons h t) = ...

instance Applicative ZipList where
  pure a = Cons a (pure a)
  Nil <*> _ = Nil
  _ <*> Nil = Nil
  Cons h1 t1 <*> Cons h2 t2 = Cons (h1 h2) (t1 <*> t2)

-- semigroups
Int/+ Int/* ...

-- monoids are semigroups that has id
(->)/(.)/id

type keyword is type alias (not define)

:info Functor to get a list of all Functors

list1 calls list and list calls list1?
that's fine, they both have base cases so they terminate, since haskell has lazy evaluation
consequences (not meaning) of lazy evaluation:
> bottom = bottom
> False && bottom
False
> konst a _ = a
> konst 99 bottom
99

f _|_ = _|_ then strict
i.e. if you can pass in a _|_ and not always get back a _|_ then it's strict

haskell is lazy so
> bottom = bottom
> blah = 1 :. bottom
> headOr 99 blah
1
> headOr 99 (map (*10) blah)
10
> headOr 99 (map (*10) (bottom :. bottom))
-- spins forever
> isEmpty (bottom :. bottom)
False

type of bottom? unhabited type
> :t bottom
bottom ::t
> :t bottom :. bottom
bottom :. bottom :: List t
> :t map (*10) (bottom :. bottom)
map (*10) (bottom :. bottom) :: Num b => List b

functional programming languages can have lazy evaluation but not general purpose ones

> foldRight const 99 infinity
0

bottom in haskell is "undefined"

applicatives: you cannot use any previously used value
one less constraint, so more operations can be performed on them

what's in Parser.hs is monad based parsing

next up exercises if you want more parsing: MoreParser.hs and JsonParser.hs

https://www.youtube.com/watch?v=NzIZzvbplSM



IO (a monad)

unit () has one constructor with no arguments

Queensland Functional Programming Lab
IRC Freenode: #qfpl

Q: is there a way to use a single lift, instead of lift0, 1, 2, 3 ...?
A: applicative comprehension / idiom brackets but not suggested